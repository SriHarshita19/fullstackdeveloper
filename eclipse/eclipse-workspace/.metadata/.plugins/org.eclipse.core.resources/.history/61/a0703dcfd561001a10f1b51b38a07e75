package com.cts.training.netflixzuulapigatewayserver;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.password.PasswordEncoder;
@Configuration
@EnableWebSecurity
public class SpringSecurityConfiguration extends WebSecurityConfigurerAdapter{
	
	@Autowired
	DataSource dataSource;
@Override
protected void configure(HttpSecurity http)throws Exception{
	http.authorizeRequests()
	.antMatchers("/").permitAll()
	.antMatchers("/register-service/**").access("hasRole('USER')")
	.and().csrf().disable()
	.httpBasic();
}
@Override
protected void configure(AuthenticationManagerBuilder auth) throws Exception{
	auth.jdbcAuthentication()
		.usersByUsernameQuery("select username,password,true from register where username=?")
		.authoritiesByUsernameQuery("select username,role from register where username=?")
	    .dataSource(dataSource)
	    .passwordEncoder(new PasswordEncoder() {
			
			@Override
			public boolean matches(CharSequence rawPassword, String encodedPassword) {
				// TODO Auto-generated method stub
				return rawPassword.equals(encodedPassword);
			}
			
			@Override
			public String encode(CharSequence rawPassword) {
				// TODO Auto-generated method stub
				return rawPassword.toString();
			}
		});
	    
	   
}
}
